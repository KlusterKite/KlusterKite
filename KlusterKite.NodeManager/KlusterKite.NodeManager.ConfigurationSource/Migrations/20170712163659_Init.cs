// <auto-generated/>

namespace KlusterKite.NodeManager.ConfigurationSource.Migrations
{
    using System;
    using System.Diagnostics.CodeAnalysis;

    using Microsoft.EntityFrameworkCore.Migrations;

    [SuppressMessage("ReSharper", "ArgumentsStyleStringLiteral", Justification = "auto-generated")]
    [SuppressMessage("ReSharper", "RedundantArgumentDefaultValue", Justification = "auto-generated")]
    public partial class Init : Migration
    {
        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(name: "CompatibleTemplate");

            migrationBuilder.DropTable(name: "MigrationLogRecords");

            migrationBuilder.DropTable(name: "RoleUsers");

            migrationBuilder.DropTable(name: "Migrations");

            migrationBuilder.DropTable(name: "Roles");

            migrationBuilder.DropTable(name: "Users");

            migrationBuilder.DropTable(name: "Configurations");
        }

        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Configurations",
                columns: table => new
                                      {
                                          Id = table.Column<int>(type: "serial", nullable: false),
                                          Created = table.Column<DateTimeOffset>(nullable: false),
                                          Finished = table.Column<DateTimeOffset>(nullable: true),
                                          IsStable = table.Column<bool>(nullable: false),
                                          MajorVersion = table.Column<int>(nullable: false),
                                          MinorVersion = table.Column<int>(nullable: false),
                                          Name = table.Column<string>(nullable: true),
                                          Notes = table.Column<string>(nullable: true),
                                          SettingsJson = table.Column<string>(nullable: true),
                                          Started = table.Column<DateTimeOffset>(nullable: true),
                                          State = table.Column<int>(nullable: false)
                                      },
                constraints: table => { table.PrimaryKey("PK_Configurations", x => x.Id); });

            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                                      {
                                          Uid = table.Column<Guid>(nullable: false),
                                          AllowedScopeJson = table.Column<string>(nullable: true),
                                          DeniedScopeJson = table.Column<string>(nullable: true),
                                          Name = table.Column<string>(nullable: true)
                                      },
                constraints: table => { table.PrimaryKey("PK_Roles", x => x.Uid); });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                                      {
                                          Uid = table.Column<Guid>(nullable: false),
                                          ActiveTill = table.Column<DateTimeOffset>(nullable: true),
                                          BlockedTill = table.Column<DateTimeOffset>(nullable: true),
                                          IsBlocked = table.Column<bool>(nullable: false),
                                          IsDeleted = table.Column<bool>(nullable: false),
                                          Login = table.Column<string>(nullable: true),
                                          Password = table.Column<string>(nullable: true)
                                      },
                constraints: table => { table.PrimaryKey("PK_Users", x => x.Uid); });

            migrationBuilder.CreateTable(
                name: "CompatibleTemplate",
                columns: table => new
                                      {
                                          Id = table.Column<int>(type: "serial", nullable: false),
                                          CompatibleConfigurationId = table.Column<int>(nullable: false),
                                          ConfigurationId = table.Column<int>(nullable: false),
                                          TemplateCode = table.Column<string>(nullable: true)
                                      },
                constraints: table =>
                    {
                        table.PrimaryKey("PK_CompatibleTemplate", x => x.Id);
                        table.ForeignKey(
                            name: "FK_CompatibleTemplate_Configurations_CompatibleConfigurationId",
                            column: x => x.CompatibleConfigurationId,
                            principalTable: "Configurations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_CompatibleTemplate_Configurations_ConfigurationId",
                            column: x => x.ConfigurationId,
                            principalTable: "Configurations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });

            migrationBuilder.CreateTable(
                name: "Migrations",
                columns: table => new
                                      {
                                          Id = table.Column<int>(type: "serial", nullable: false),
                                          Direction = table.Column<int>(nullable: true),
                                          Finished = table.Column<DateTimeOffset>(nullable: true),
                                          FromConfigurationId = table.Column<int>(nullable: false),
                                          IsActive = table.Column<bool>(nullable: false),
                                          Started = table.Column<DateTimeOffset>(nullable: false),
                                          State = table.Column<int>(nullable: false),
                                          ToConfigurationId = table.Column<int>(nullable: false)
                                      },
                constraints: table =>
                    {
                        table.PrimaryKey("PK_Migrations", x => x.Id);
                        table.ForeignKey(
                            name: "FK_Migrations_Configurations_FromConfigurationId",
                            column: x => x.FromConfigurationId,
                            principalTable: "Configurations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_Migrations_Configurations_ToConfigurationId",
                            column: x => x.ToConfigurationId,
                            principalTable: "Configurations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });

            migrationBuilder.CreateTable(
                name: "RoleUsers",
                columns: table => new
                                      {
                                          UserUid = table.Column<Guid>(nullable: false),
                                          RoleUid = table.Column<Guid>(nullable: false),
                                          Id = table.Column<int>(type: "serial", nullable: false)
                                      },
                constraints: table =>
                    {
                        table.PrimaryKey("PK_RoleUsers", x => new { x.UserUid, x.RoleUid });
                        table.UniqueConstraint("AK_RoleUsers_Id", x => x.Id);
                        table.ForeignKey(
                            name: "FK_RoleUsers_Roles_RoleUid",
                            column: x => x.RoleUid,
                            principalTable: "Roles",
                            principalColumn: "Uid",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_RoleUsers_Users_UserUid",
                            column: x => x.UserUid,
                            principalTable: "Users",
                            principalColumn: "Uid",
                            onDelete: ReferentialAction.Cascade);
                    });

            migrationBuilder.CreateTable(
                name: "MigrationLogRecords",
                columns: table => new
                                      {
                                          Id = table.Column<int>(type: "serial", nullable: false),
                                          ConfigurationId = table.Column<int>(nullable: false),
                                          DestinationPoint = table.Column<string>(nullable: true),
                                          ErrorStackTrace = table.Column<string>(nullable: true),
                                          Finished = table.Column<DateTimeOffset>(nullable: true),
                                          Message = table.Column<string>(nullable: true),
                                          MigrationId = table.Column<int>(nullable: true),
                                          MigratorName = table.Column<string>(nullable: true),
                                          MigratorTemplateCode = table.Column<string>(nullable: true),
                                          MigratorTemplateName = table.Column<string>(nullable: true),
                                          MigratorTypeName = table.Column<string>(nullable: true),
                                          ResourceCode = table.Column<string>(nullable: true),
                                          ResourceName = table.Column<string>(nullable: true),
                                          SourcePoint = table.Column<string>(nullable: true),
                                          Started = table.Column<DateTimeOffset>(nullable: false),
                                          Type = table.Column<int>(nullable: false)
                                      },
                constraints: table =>
                    {
                        table.PrimaryKey("PK_MigrationLogRecords", x => x.Id);
                        table.ForeignKey(
                            name: "FK_MigrationLogRecords_Configurations_ConfigurationId",
                            column: x => x.ConfigurationId,
                            principalTable: "Configurations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_MigrationLogRecords_Migrations_MigrationId",
                            column: x => x.MigrationId,
                            principalTable: "Migrations",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Restrict);
                    });

            migrationBuilder.CreateIndex(
                name: "IX_CompatibleTemplate_CompatibleConfigurationId",
                table: "CompatibleTemplate",
                column: "CompatibleConfigurationId");

            migrationBuilder.CreateIndex(
                name: "IX_CompatibleTemplate_ConfigurationId",
                table: "CompatibleTemplate",
                column: "ConfigurationId");

            migrationBuilder.CreateIndex(
                name: "IX_Migrations_FromConfigurationId",
                table: "Migrations",
                column: "FromConfigurationId");

            migrationBuilder.CreateIndex(
                name: "IX_Migrations_ToConfigurationId",
                table: "Migrations",
                column: "ToConfigurationId");

            migrationBuilder.CreateIndex(
                name: "IX_MigrationLogRecords_ConfigurationId",
                table: "MigrationLogRecords",
                column: "ConfigurationId");

            migrationBuilder.CreateIndex(
                name: "IX_MigrationLogRecords_MigrationId",
                table: "MigrationLogRecords",
                column: "MigrationId");

            migrationBuilder.CreateIndex(name: "IX_RoleUsers_RoleUid", table: "RoleUsers", column: "RoleUid");

            migrationBuilder.CreateIndex(name: "IX_Users_Login", table: "Users", column: "Login");
        }
    }
}