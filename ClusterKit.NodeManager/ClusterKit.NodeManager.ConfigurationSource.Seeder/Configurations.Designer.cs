//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClusterKit.NodeManager.ConfigurationSource.Seeder {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Configurations {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Configurations() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClusterKit.NodeManager.ConfigurationSource.Seeder.Configurations", typeof(Configurations).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  ClusterKit {
        ///
        ///    NodeManager.ConfigurationDatabaseConnectionString = &quot;User ID=postgres;Host=configDb;Port=5432;Pooling=true&quot;
        ///      
        ///    Web {
        ///
        ///      Swagger.Publish {
        ///          publishDocPath = &quot;&quot;clusterkit/manager/swagger/doc&quot;&quot;
        ///          publishUiPath = &quot;&quot;clusterkit/manager/swagger/ui&quot;&quot;
        ///      }
        ///
        ///      Services {
        ///        ClusterKit/Web/Swagger { // ServiceName is just unique service identification, used in order to handle stacked config properly. It is used just localy on node
        ///          P [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ClusterManager {
            get {
                return ResourceManager.GetString("ClusterManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  ClusterKit {
        ///
        ///    Web {
        ///
        ///      Services {
        ///        //ClusterKit/Web/Swagger { // ServiceName is just unique service identification, used in order to handle stacked config properly. It is used just localy on node
        ///          //Port = 8080 // default owin port, current node listening port for server access
        ///          //PublicHostName = default //public host name of this service. It doesn&apos;t supposed (but is not prohibited) that this should be real public service hostname. It&apos;s just used to distinguish  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Empty {
            get {
                return ResourceManager.GetString("Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	ClusterKit.NodeManager.ConfigurationDatabaseConnectionString = &quot;User ID=postgres;Host=configDb;Port=5432;Pooling=true&quot;	  
        ///}
        ///.
        /// </summary>
        public static string Migrator {
            get {
                return ResourceManager.GetString("Migrator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  ClusterKit {
        ///    Web {
        ///      Nginx {
        ///        PathToConfig = &quot;/etc/nginx/sites-enabled/clusterkit.config&quot;
        ///        ReloadCommand {
        ///          Command = /etc/init.d/nginx
        ///          Arguments = reload
        ///        } 
        ///        Configuration {
        ///          default {
        ///            &quot;location /clusterkit&quot; { 
        ///              proxy_pass = &quot;http://monitoringUI/clusterkit&quot;
        ///            }
        ///          }
        ///        }
        ///      }
        ///    }
        ///  }
        ///
        ///  akka {
        ///    remote {
        ///      helios {
        ///        tcp {
        ///          hostname = 0.0.0.0
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Publisher {
            get {
                return ResourceManager.GetString("Publisher", resourceCulture);
            }
        }
    }
}
