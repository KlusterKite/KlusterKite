<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.TestKit</name>
    </assembly>
    <members>
        <member name="M:Akka.TestKit.IEventFilterApplier.ExpectOne(System.Action)">
            <summary>
            Executes <paramref name="action"/> and
            expects one event to be logged during the execution.
            This method fails and throws an exception if more than one event is logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.ExpectOne(System.TimeSpan,System.Action)">
            <summary>
            Executes <paramref name="action"/> and
            expects one event to be logged during the execution.
            This method fails and throws an exception if more than one event is logged,
            or if a timeout occurs.
            </summary>
            <param name="timeout">The time to wait for a log event after executing <paramref name="action"/></param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Expect(System.Int32,System.Action)">
            <summary>
            Executes <paramref name="action"/> and expects the specified number
            of events to be logged during the execution.
            This method fails and throws an exception if more events than expected are logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <param name="expectedCount">The expected number of events</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Expect(System.Int32,System.TimeSpan,System.Action)">
            <summary>
            Executes <paramref name="action"/> and expects the specified number
            of events to be logged during the execution.
            This method fails and throws an exception if more events than expected are logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <param name="timeout">The time to wait for log events after executing <paramref name="action"/></param>
            <param name="expectedCount">The expected number of events</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.ExpectOne``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> and
            expects one event to be logged during the execution.
            This function fails and throws an exception if more than one event is logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <typeparam name="T">The return value of the function</typeparam>
            <param name="func">The function.</param>
            <returns>The returned value from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.ExpectOne``1(System.TimeSpan,System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> and
            expects one event to be logged during the execution.
            This function fails and throws an exception if more than one event is logged,
            or if a timeout occurs.
            </summary>
            <typeparam name="T">The return value of the function</typeparam>
            <param name="timeout">The time to wait for a log event after executing <paramref name="func"/></param>
            <param name="func">The function.</param>
            <returns>The returned value from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Expect``1(System.Int32,System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> and expects the specified number
            of events to be logged during the execution.
            This function fails and throws an exception if more events than expected are logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <typeparam name="T">The return value of the function</typeparam>
            <param name="expectedCount">The expected number of events</param>
            <param name="func">The function.</param>
            <returns>The returned value from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Expect``1(System.Int32,System.TimeSpan,System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> and expects the specified number
            of events to be logged during the execution.
            This function fails and throws an exception if more events than expected are logged,
            or if a timeout occurs. The timeout is taken from the config value
            "akka.test.filter-leeway", see <see cref="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway"/>.
            </summary>
            <typeparam name="T">The return value of the function</typeparam>
            <param name="timeout">The time to wait for log events after executing <paramref name="func"/></param>
            <param name="expectedCount">The expected number of events</param>
            <param name="func">The function.</param>
            <returns>The returned value from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Mute``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> and prevent events from being logged during the execution.
            </summary>
            <typeparam name="T">The return value of the function</typeparam>
            <param name="func">The function.</param>
            <returns>The returned value from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Mute(System.Action)">
            <summary>
            Executes <paramref name="action"/> and prevent events from being logged during the execution.
            </summary>
            <param name="action">The function.</param>
            <returns>The returned value from <paramref name="action"/>.</returns>
        </member>
        <member name="M:Akka.TestKit.IEventFilterApplier.Mute">
            <summary>
            Prevents events from being logged from now on. To allow events to be logged again, call 
            <see cref="M:Akka.TestKit.IUnmutableFilter.Unmute">Unmute</see> on the returned object.
            <example>
            <code>
            var filter = EventFilter.Debug().Mute();
            ...
            filter.Unmute();
            </code>
            </example>
            You may also use it like this:
            <example>
            <code>
            using(EventFilter.Debug().Mute())
            {
               ...
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Akka.TestKit.IEventFilterApplier.And">
            <summary>
            Let's you chain more filters together. Similar to Akka JVM's filterEvents
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.CustomEventFilter">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.EventFilterBase">
            <summary>Internal! 
            Facilities for selectively filtering out expected events from logging so
            that you can keep your test runâ€™s console output clean and do not miss real
            error messages.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.EventFilterBase.IsMatch(Akka.Event.LogEvent)">
            <summary>
            Determines whether the specified event should be filtered or not.
            </summary>
            <returns><c>true</c> to filter the event.</returns>
        </member>
        <member name="M:Akka.TestKit.Internal.EventFilterBase.InternalDoMatch(System.String,System.Object)">
            <summary>Internal helper.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.DeadLettersFilter">
            <summary>
            Filter which matches DeadLetter events, if the wrapped message conforms to the given type.
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.DebugFilter">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.ErrorFilter">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.InternalEventFilterApplier">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.IUnmutableFilter.Unmute">
            <summary>
            Call this to let events that previously have been muted to be logged again.
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalEventFilterApplier.InternalUnmutableFilter.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalEventFilterApplier.InternalUnmutableFilter.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
            user's code. Managed and unmanaged resources will be disposed.<br />
            if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
            unmanaged resources can be disposed.</param>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.ContainsString">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.IStringMatcher">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.EqualsString">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Error(System.String,System.String,System.String,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Error"/> events.
            <para><paramref name="message"/> takes priority over <paramref name="start"/>.
            If <paramref name="message"/>!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start"/>!=<c>null</c> and <paramref name="message"/> has not been specified,
            the event must start with the given string to be filtered.
            If <paramref name="contains"/>!=<c>null</c> and both <paramref name="message"/> and 
            <paramref name="start"/> have not been specified,
            the event must contain the given string to be filtered.
            </para><example>
            Error()                                   // filter all Error events
            Error("message")                          // filter on exactly matching message
            Error(source: obj)                        // filter on event source
            Error(start: "Expected")                  // filter on start of message
            Error(contains: "Expected")               // filter on part of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="source">Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Error(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Error"/> events. Events must match the specified pattern to be filtered.
            <example>
            Error(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Warning(System.String,System.String,System.String,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Warning"/> events.
            <para><paramref name="message"/> takes priority over <paramref name="start"/>.
            If <paramref name="message"/>!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start"/>!=<c>null</c> and <paramref name="message"/> has not been specified,
            the event must start with the given string to be filtered.
            If <paramref name="contains"/>!=<c>null</c> and both <paramref name="message"/> and 
            <paramref name="start"/> have not been specified,
            the event must contain the given string to be filtered.
            </para><example>
            Warning()                                   // filter all Warning events
            Warning("message")                          // filter on exactly matching message
            Warning(source: obj)                        // filter on event source
            Warning(start: "Expected")                  // filter on start of message
            Warning(contains: "Expected")               // filter on part of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="source">Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Warning(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Warning"/> events. Events must match the specified pattern to be filtered.
            <example>
            Warning(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Info(System.String,System.String,System.String,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Info"/> events.
            <para><paramref name="message"/> takes priority over <paramref name="start"/>.
            If <paramref name="message"/>!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start"/>!=<c>null</c> and <paramref name="message"/> has not been specified,
            the event must start with the given string to be filtered.
            If <paramref name="contains"/>!=<c>null</c> and both <paramref name="message"/> and 
            <paramref name="start"/> have not been specified,
            the event must contain the given string to be filtered.
            </para><example>
            Info()                                   // filter all Info events
            Info("message")                          // filter on exactly matching message
            Info(source: obj)                        // filter on event source
            Info(start: "Expected")                  // filter on start of message
            Info(contains: "Expected")               // filter on part of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="source">Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Info(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Info"/> events. Events must match the specified pattern to be filtered.
            <example>
            Info(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Debug(System.String,System.String,System.String,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Debug"/> events.
            <para><paramref name="message"/> takes priority over <paramref name="start"/>.
            If <paramref name="message"/>!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start"/>!=<c>null</c> and <paramref name="message"/> has not been specified,
            the event must start with the given string to be filtered.
            If <paramref name="contains"/>!=<c>null</c> and both <paramref name="message"/> and 
            <paramref name="start"/> have not been specified,
            the event must contain the given string to be filtered.
            </para><example>
            Debug()                                   // filter all Debug events
            Debug("message")                          // filter on exactly matching message
            Debug(source: obj)                        // filter on event source
            Debug(start: "Expected")                  // filter on start of message
            Debug(contains: "Expected")               // filter on part of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="source">Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Debug(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Debug"/> events. Events must match the specified pattern to be filtered.
            <example>
            Debug(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Exception``1(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Create a filter for <see cref="T:Akka.Event.Error"/> events. Events must match the specified pattern to be filtered.
            <example>
            Error&lt;MyException&gt;(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Exception(System.Type,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Create a filter for Error events. Events must match the specified pattern to be filtered.
            <example>
            Error&lt;MyException&gt;(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="exceptionType">The type of the exception. It must be a <see cref="T:System.Exception"/>.</param>
            <param name="pattern">The event must match the pattern to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <param name="checkInnerExceptions">Optional. When set to <c>true</c> not only the top level exception is matched, but inner exceptions are also checked until one matches. Default: <c>false</c></param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Exception``1(System.String,System.String,System.String,System.String)">
            <summary>
            Create a filter for Error events.
            <para><paramref name="message" /> takes priority over <paramref name="start" />.
            If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
            the event must start with the given string to be filtered.
            </para><example>
            Error&lt;MyException&gt;()                                         // filter only on exception type
            Error&lt;MyException&gt;("message")                                // filter on exactly matching message
            Error&lt;MyException&gt;(source: obj)                              // filter on event source
            Error&lt;MyException&gt;(start: "Expected")                        // filter on start of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="start">>Optional. If specified (and <paramref name="message"/> is not specified, the event must start with the string to be filtered.</param>
            <param name="source">>Optional. The event source.</param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Exception(System.Type,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a filter for Error events.
            <para><paramref name="message"/> takes priority over <paramref name="start"/>.
            If <paramref name="message"/>!=<c>null</c> the event must match it to be filtered.
            If <paramref name="start"/>!=<c>null</c> and <paramref name="message"/> has not been specified,
            the event must start with the given string to be filtered.
            </para><example>
            Error(typeof(MyException))                                     // filter only on exception type
            Error(typeof(MyException), "message")                          // filter on exactly matching message
            Error(typeof(MyException), source: obj)                        // filter on event source
            Error(typeof(MyException), start: "Expected")                  // filter on start of message
            </example>
            <remarks>Please note that filtering on the <paramref name="source"/> being
            <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
            </remarks>
            </summary>
            <param name="exceptionType">The type of the exception. It must be a <see cref="T:System.Exception"/>.</param>
            <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
            <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
            <param name="start">&gt;Optional. If specified (and <paramref name="message"/> is not specified, the event must start with the string to be filtered.</param>
            <param name="source">&gt;Optional. The event source.</param>
            <param name="checkInnerExceptions">Optional. When set to <c>true</c> not only the top level exception is matched, but inner exceptions are also checked until one matches. Default: <c>false</c></param>
            <returns>The new filter</returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Exception(System.Type,Akka.TestKit.Internal.StringMatcher.IStringMatcher,Akka.TestKit.Internal.StringMatcher.IStringMatcher,System.Boolean)">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Custom(System.Predicate{Akka.Event.LogEvent})">
            <summary>
            Create a custom event filter. The filter will affect those events for
             which the predicate function returns <c>true</c>.
            </summary>
            <param name="predicate">This function must return <c>true</c> for events that should be filtered.</param>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.Custom``1(System.Predicate{``0})">
            <summary>
            Create a custom event filter. The filter will affect those events for
             which the predicate function returns <c>true</c>.
            </summary>
            <param name="predicate">This function must return <c>true</c> for events that should be filtered.</param>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.ForLogLevel(Akka.Event.LogLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a event filter given the specified <paramref name="logLevel"/>.
            This is the same as calling <see cref="M:Akka.TestKit.EventFilterFactory.Debug(System.String,System.String,System.String,System.String)"/>, <see cref="M:Akka.TestKit.EventFilterFactory.Info(System.String,System.String,System.String,System.String)"/>
             <see cref="M:Akka.TestKit.EventFilterFactory.Warning(System.String,System.String,System.String,System.String)"/> or <see cref="M:Akka.TestKit.EventFilterFactory.Error(System.String,System.String,System.String,System.String)"/>
            directly.
            </summary>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.ForLogLevel(Akka.Event.LogLevel,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Creates a filter given the specified <paramref name="logLevel"/>.
            This is the same as calling <see cref="M:Akka.TestKit.EventFilterFactory.Debug(System.Text.RegularExpressions.Regex,System.String)"/>, <see cref="M:Akka.TestKit.EventFilterFactory.Info(System.Text.RegularExpressions.Regex,System.String)"/>
             <see cref="M:Akka.TestKit.EventFilterFactory.Warning(System.Text.RegularExpressions.Regex,System.String)"/> or <see cref="M:Akka.TestKit.EventFilterFactory.Error(System.Text.RegularExpressions.Regex,System.String)"/>
            directly.
            </summary>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.DeadLetter">
            <summary>
            Creates a filter that catches dead letters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.DeadLetter``1(System.String)">
            <summary>
            Creates a filter that catches dead letters of the specified type and, optionally from the specified source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.DeadLetter``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Creates a filter that catches dead letters of the specified type and matches the predicate, and optionally from the specified source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.DeadLetter(System.Type,System.String)">
            <summary>
            Creates a filter that catches dead letters of the specified type and, optionally from the specified source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.EventFilterFactory.DeadLetter(System.Type,System.Func{System.Object,System.Boolean},System.String)">
            <summary>
            Creates a filter that catches dead letters of the specified type and matches the predicate, and optionally from the specified source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Akka.TestKit.Internal.InfoFilter">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.EqualsStringAndPathMatcher">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.MatchesAll">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.PredicateMatcher">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.RegexMatcher">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.StringMatcher.StartsWithString">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.WarningFilter">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.AutoPilot">
            <summary>
            Creates an <see cref="T:Akka.TestKit.AutoPilot"/>.
            <para>An <see cref="T:Akka.TestKit.AutoPilot"/> will be called for each received message and can be 
            used to send or forward messages, etc. </para>
            <para>Each invocation must return the <see cref="T:Akka.TestKit.AutoPilot"/> for the next round.</para>
            <para>To reuse an <see cref="T:Akka.TestKit.AutoPilot"/> for the next message either 
            return the instance or return <see cref="P:Akka.TestKit.AutoPilot.KeepRunning"/>.</para>
            <para>Return <see cref="P:Akka.TestKit.AutoPilot.NoAutoPilot"/> to stop handling messages.</para>
            </summary>
        </member>
        <member name="M:Akka.TestKit.AutoPilot.Run(Akka.Actor.IActorRef,System.Object)">
            <summary>
            <para>This function will be called for each received message and can be 
            used to send or forward messages, etc. </para>
            <para>Each invocation must return the <see cref="T:Akka.TestKit.AutoPilot"/> for the next round.</para> 
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Akka.TestKit.AutoPilot"/> to be used for the next round</returns>
        </member>
        <member name="P:Akka.TestKit.AutoPilot.NoAutoPilot">
            <summary>
            When returned by another <see cref="T:Akka.TestKit.AutoPilot"/> then no
            action will be performed by the <see cref="T:Akka.TestKit.TestActor"/>
            for the next message. This is the default <see cref="T:Akka.TestKit.AutoPilot"/> used 
            by <see cref="T:Akka.TestKit.AutoPilot"/>.
            </summary>
        </member>
        <member name="P:Akka.TestKit.AutoPilot.KeepRunning">
            <summary>
            When returned by another <see cref="T:Akka.TestKit.AutoPilot"/> then <see cref="T:Akka.TestKit.TestActor"/>
            will reuse the AutoPilot for the next message.
            </summary>
        </member>
        <member name="T:Akka.TestKit.NoAutoPilot">
            <summary>
            When returned by another <see cref="T:Akka.TestKit.AutoPilot"/> then no
            action will be performed by the <see cref="T:Akka.TestKit.TestActor"/>
            for the next message. This is the default <see cref="T:Akka.TestKit.AutoPilot"/> used 
            by <see cref="T:Akka.TestKit.AutoPilot"/>.
            </summary>
        </member>
        <member name="T:Akka.TestKit.KeepRunning">
            <summary>
            When returned by another <see cref="T:Akka.TestKit.AutoPilot"/> then <see cref="T:Akka.TestKit.TestActor"/>
            will reuse the AutoPilot for the next message.
            </summary>
        </member>
        <member name="T:Akka.TestKit.DelegateAutoPilot">
            <summary>
            Creates an <see cref="T:Akka.TestKit.AutoPilot"/>.
            <para>The <see cref="T:Akka.TestKit.AutoPilotDelegate"/> specified in the constructor will 
            be called for each received message and can be used to send or forward 
            messages, etc. </para>
            <para>Each invocation must return the <see cref="T:Akka.TestKit.AutoPilot"/> for the next round.</para>
            <para>To have this instance handle the next message either return this instance
            or return <see cref="P:Akka.TestKit.AutoPilot.KeepRunning"/>.</para>
            <para>Return <see cref="P:Akka.TestKit.AutoPilot.NoAutoPilot"/> to stop handling messages.</para>
            </summary>
        </member>
        <member name="T:Akka.TestKit.INoImplicitSender">
            <summary>
            Normally test classes has <see cref="P:Akka.TestKit.TestKitBase.TestActor">TestActor</see> as implicit sender.
            So when no sender is specified when sending messages, <see cref="P:Akka.TestKit.TestKitBase.TestActor">TestActor</see>
            is used.
            When a a test class implements <see cref="T:Akka.TestKit.INoImplicitSender"/> this behavior is removed and the normal
            behavior is restored, i.e. <see cref="T:Akka.Actor.NoSender"/> is used as sender when no sender has been specified.
            <example>
            <code>
            public class WithImplicitSender : TestKit
            {
               public void TheTestMethod()
               {
                  ...
                  someActor.Tell("message");             //TestActor is used as Sender
                  someActor.Tell("message", TestActor);  //TestActor is used as Sender
               }
            }
            
            public class WithNoImplicitSender : TestKit, INoImplicitSender
            {
               public void TheTestMethod()
               {
                  ...
                  someActor.Tell("message");    //NoSender is used as Sender
               }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.BlockingCollectionTestActorQueue`1">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.ITestActorQueue`1">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.ITestActorQueueProducer`1">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.ITestActorQueueProducer`1.Enqueue(`0)">
            <summary>Adds the specified item to the queue.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Akka.TestKit.Internal.ITestActorQueue`1.GetAll">
            <summary>
            Get all messages.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Akka.TestKit.Internal.InternalTestActor">
            <summary>
            An actor that enqueues received messages to a <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.InternalTestActorRef">
            <summary>INTERNAL
            This special ActorRef is exclusively for use during unit testing in a single-threaded environment. Therefore, it
            overrides the dispatcher to CallingThreadDispatcher and sets the receiveTimeout to None. Otherwise,
            it acts just like a normal ActorRef. You may retrieve a reference to the underlying actor to test internal logic.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalTestActorRef.CreateUniqueName">
            <summary>INTERNAL
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalTestActorRef.Receive(System.Object,Akka.Actor.IActorRef)">
            <summary>
            Directly inject messages into actor receive behavior. Any exceptions
            thrown will be available to you, while still being able to use
            become/unbecome.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalTestActorRef.Watch(Akka.Actor.IActorRef)">
            <summary>
            Registers this actor to be a death monitor of the provided ActorRef
            This means that this actor will get a Terminated()-message when the provided actor
            is permanently terminated.
            Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
            </summary>
            <param name="subject">The subject to watch.</param>
            <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalTestActorRef.Unwatch(Akka.Actor.IActorRef)">
            <summary>
            Deregisters this actor from being a death monitor of the provided ActorRef
            This means that this actor will not get a Terminated()-message when the provided actor
            is permanently terminated.
            Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
            </summary>
            <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
            <param name="subject">The subject to unwatch.</param>
        </member>
        <member name="M:Akka.TestKit.Internal.InternalTestActorRef.Create(Akka.Actor.ActorSystem,Akka.Actor.Props,Akka.Actor.IActorRef,System.String)">
            <summary>
            INTERNAL
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.Internal.BlockingQueue`1">
            <summary>
            This behaves exactly like a <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/> with a queue as the underlying storage
            except it adds the possibility to add an item first, making it a LIFO.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
            <typeparam name="T">The type of item to store</typeparam>
        </member>
        <member name="M:Akka.TestKit.Internal.BlockingQueue`1.Take(System.Threading.CancellationToken)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="cancellationToken">The cancellation token that can be used to cancel the operation..</param>
            <returns>The item removed from the collection.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation was cancelled</exception>
        </member>
        <member name="T:Akka.TestKit.Internal.TimeSpanExtensions">
            <summary>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsUndefined(System.Nullable{System.TimeSpan})">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> has no value.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsZero(System.TimeSpan)">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> <c>== 0</c>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsZero(System.Nullable{System.TimeSpan})">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> <c>== 0</c>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsPositiveFinite(System.TimeSpan)">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> <c>&gt;= 0</c>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsPositiveFinite(System.Nullable{System.TimeSpan})">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> <c>&gt;= 0</c>
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfinite(System.TimeSpan)">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> is negative.
            This is a relaxed definition of when a <see cref="T:System.TimeSpan"/>.
            Use <see cref="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfiniteTimeout(System.TimeSpan)"/> to test using the stricter definition.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfinite(System.Nullable{System.TimeSpan})">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> is negative.
            This is a relaxed definition of when a <see cref="T:System.TimeSpan"/>.
            Use <see cref="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfiniteTimeout(System.TimeSpan)"/> to test using the stricter definition.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfiniteTimeout(System.TimeSpan)">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> equals <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> 
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.IsInfiniteTimeout(System.Nullable{System.TimeSpan})">
            <summary>
            Returns <c>true</c> if the <paramref name="timeSpan"/> equals <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> 
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.EnsureIsPositiveFinite(System.TimeSpan,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the <paramref name="timeSpan"/> is not 0 or greater.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.Min(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns the smallest value.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.Internal.TimeSpanExtensions.Min(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Returns the smallest value. if <paramref name="b"/> is <c>null</c> it's treated as 
            undefined, and <paramref name="a"/> is returned.
            <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActorRefBase`1">
            <summary>
            This is the base class for TestActorRefs
            </summary>
            <typeparam name="TActor">The type of actor</typeparam>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Receive(System.Object,Akka.Actor.IActorRef)">
            <summary>
            Directly inject messages into actor receive behavior. Any exceptions
            thrown will be available to you, while still being able to use
            become/unbecome.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Tell(System.Object)">
            <summary>
            Sends a message to this actor. 
            If this call is made from within an actor, the current actor will be the sender.
            If the call is made from a test class that is based on TestKit, TestActor will 
            will be the sender;
            otherwise <see cref="T:Akka.Actor.NoSender"/> will be set as sender.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Forward(System.Object)">
            <summary>
            Forwards a message to this actor.
            If this call is made from within an actor, the current actor will be the sender.
            If the call is made from a test class that is based on TestKit, TestActor will 
            will be the sender;
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Tell(System.Object,Akka.Actor.IActorRef)">
            <summary>
            Sends a message to this actor with the specified sender.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender</param>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Watch(Akka.Actor.IActorRef)">
            <summary>
            Registers this actor to be a death monitor of the provided ActorRef
            This means that this actor will get a Terminated()-message when the provided actor
            is permanently terminated.
            Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
            </summary>
            <param name="subject">The subject to watch.</param>
            <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
        </member>
        <member name="M:Akka.TestKit.TestActorRefBase`1.Unwatch(Akka.Actor.IActorRef)">
            <summary>
            Deregisters this actor from being a death monitor of the provided ActorRef
            This means that this actor will not get a Terminated()-message when the provided actor
            is permanently terminated.
            Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
            </summary>
            <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
            <param name="subject">The subject to unwatch.</param>
        </member>
        <member name="P:Akka.TestKit.TestActorRefBase`1.Path">
            <summary>
            Gets the path of this instance
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActors.BlackHoleActor">
            <summary>
            A <see cref="T:Akka.TestKit.TestActors.BlackHoleActor"/> is an actor that silently 
            accepts any messages sent to it.
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestActors.BlackHoleActor.Props">
            <summary>
            Returns a <see cref="P:Akka.TestKit.TestActors.BlackHoleActor.Props"/> object that can be used to create a <see cref="T:Akka.TestKit.TestActors.BlackHoleActor"/>
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActors.EchoActor">
            <summary>
            An <see cref="T:Akka.TestKit.TestActors.EchoActor"/> is an actor that echoes whatever is sent to it, to the
            TestKit's <see cref="P:Akka.TestKit.TestKitBase.TestActor">TestActor</see>.
            By default it also echoes back to the sender, unless the sender is the TestActor
            (in this case the TestActor will only receive one message).
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestActors.EchoActor.Props(Akka.TestKit.TestKitBase,System.Boolean)">
            <summary>
            Returns a <see cref="M:Akka.TestKit.TestActors.EchoActor.Props(Akka.TestKit.TestKitBase,System.Boolean)"/> object that can be used to create an <see cref="T:Akka.TestKit.TestActors.EchoActor"/>.
            The  <see cref="T:Akka.TestKit.TestActors.EchoActor"/> echoes whatever is sent to it, to the
            TestKit's <see cref="P:Akka.TestKit.TestKitBase.TestActor">TestActor</see>.
            By default it also echoes back to the sender, unless the sender is the TestActor
            (in this case the TestActor will only receive one message) or unless 
            <paramref name="echoBackToSenderAsWell"/> has been set to <c>false</c>.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestBarrier">
            <summary>
            Wraps a <see cref="T:System.Threading.Barrier"/> for use in testing.
            It always uses a timeout when waiting.
            Timeouts will always throw an exception. The default timeout is based on 
            TestKits default out, see <see cref="P:Akka.TestKit.TestKitSettings.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestFSMRef`3">
            <summary>
            This is a specialized form of the <see cref="T:Akka.TestKit.TestActorRef`1"/> with support for querying and
            setting the state of a <see cref="T:Akka.Actor.FSM`2"/>. 
            </summary>
            <typeparam name="TActor">The type of the actor.</typeparam>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TData">The type of the data.</typeparam>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.SetStateData(`2,System.Nullable{System.TimeSpan})">
            <summary>
            Change FSM state data; but do not transition to a new state name. 
            This method is directly equivalent to a transition initiated from within the FSM.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.SetStateTimeout(System.TimeSpan)">
            <summary>
            Change FSM state timeout. This method is directly equivalent to a
            transition initiated from within the FSM using the current state name and data
            but with the specified timeout.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.SetState(`1,System.Nullable{System.TimeSpan})">
            <summary>
            Change FSM state; but keeps the current state data. 
            This method is directly equivalent to a  transition initiated from within the FSM.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.SetState(`1,`2,System.Nullable{System.TimeSpan},Akka.Actor.FSMBase.Reason)">
            <summary>
            Change FSM state. This method is directly equivalent to a
            corresponding transition initiated from within the FSM, including timeout
            and stop handling.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.SetTimer(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Proxy for <see cref="M:Akka.Actor.FSM`2.SetTimer(System.String,System.Object,System.TimeSpan,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.CancelTimer(System.String)">
            <summary>
            Proxy for <see cref="M:Akka.Actor.FSM`2.CancelTimer(System.String)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.IsTimerActive(System.String)">
            <summary>
            Proxy for <see cref="M:Akka.Actor.FSM`2.IsTimerActive(System.String)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestFSMRef`3.IsStateTimerActive">
            <summary>
            Determines whether the FSM has a active state timer active.
            </summary>
            <returns><c>true</c> if the FSM has a active state timer active; <c>false</c> otherwise</returns>
        </member>
        <member name="P:Akka.TestKit.TestFSMRef`3.StateName">
            <summary>Get current state name of this FSM.</summary>
        </member>
        <member name="P:Akka.TestKit.TestFSMRef`3.StateData">
            <summary>Get current state data of this FSM.</summary>
        </member>
        <member name="T:Akka.TestKit.TestActor.Ignore">
            <summary>
            A delegate that returns <c>true</c> if the <paramref name="message"/> should be ignored.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Akka.TestKit.TestActor.SetIgnore">
            <summary>
            Message that is supposed to be sent to a <see cref="T:Akka.TestKit.TestActor"/> to make it ignore 
            received messages. If the delegate specified on the constructor returns
            <c>true</c> the message will be ignored by <see cref="T:Akka.TestKit.TestActor"/>
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActor.Watch">
            <summary>
            Message that is supposed to be sent to a <see cref="T:Akka.TestKit.TestActor"/> to make it watch 
            the specified actor and receive death notifications, 
            i.e. <see cref="T:Akka.Actor.Terminated"/> messages.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActor.Unwatch">
            <summary>
            Message that is supposed to be sent to a <see cref="T:Akka.TestKit.TestActor"/> to make it unwatch 
            a previously watched actor.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActor.SetAutoPilot">
            <summary>
            Message that is supposed to be sent to a <see cref="T:Akka.TestKit.TestActor"/>
            to install an AutoPilot to drive the <see cref="T:Akka.TestKit.TestActor"/>: the AutoPilot 
            will be run for each received message and can be used to send or forward 
            messages, etc. Each invocation must return the AutoPilot for the next round.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestActorRef`1">
            <summary>
            This special ActorRef is exclusively for use during unit testing in a single-threaded environment. Therefore, it
            overrides the dispatcher to <see cref="T:Akka.TestKit.CallingThreadDispatcher"/> and sets the receiveTimeout to None. Otherwise,
            it acts just like a normal ActorRef. You may retrieve a reference to the underlying actor to test internal logic.
            A <see cref="T:Akka.TestKit.TestActorRef`1"/> can be implicitly casted to an <see cref="T:Akka.Actor.IActorRef"/> or you can get the actual
            <see cref="T:Akka.Actor.IActorRef"/> from the <see cref="P:Akka.TestKit.TestActorRefBase`1.Ref">Ref</see> property.
            </summary>
            <typeparam name="TActor">The type of actor</typeparam>
        </member>
        <member name="M:Akka.TestKit.TestActorRef`1.#ctor(Akka.Actor.ActorSystem,Akka.Actor.Props,Akka.Actor.IActorRef,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.TestActorRef`1"/> class.
            </summary>
            <param name="system">The system.</param>
            <param name="actorProps">The actor props.</param>
            <param name="supervisor">Optional: The supervisor.</param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="T:Akka.TestKit.TestEventListener">
            <summary>
            EventListener for running tests, which allows selectively filtering out
            expected messages. To use it, include something like this in
            the configuration:
            <code>akka.loggers = ["Akka.TestKit.TestEventListener, Akka.TestKit"]</code>
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestKitAssertionsProvider">
            <summary>
            Contains <see cref="T:Akka.TestKit.ITestKitAssertions"/>.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestKitBase">
            <summary>
            <remarks>Unless you're creating a TestKit for a specific test framework, you should probably not inherit directly from this class.</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.#ctor(Akka.TestKit.ITestKitAssertions,Akka.Actor.ActorSystem,System.String)">
            <summary>
            Create a new instance of the <see cref="T:Akka.TestKit.TestKitBase"/> class.
            If no <paramref name="system"/> is passed in, a new system 
            with <see cref="P:Akka.TestKit.TestKitBase.DefaultConfig"/> will be created.
            </summary>
            <param name="assertions"></param>
            <param name="system">Optional: The actor system.</param>
            <param name="testActorName">Optional: The name of the TestActor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.#ctor(Akka.TestKit.ITestKitAssertions,Akka.Configuration.Config,System.String,System.String)">
            <summary>
            Create a new instance of the <see cref="T:Akka.TestKit.TestKitBase"/> class.
            A new system with the specified configuration will be created.
            </summary>
            <param name="config">The configuration to use for the system.</param>
            <param name="testActorName">Optional: The name of the TestActor.</param>
            <param name="assertions"></param>
            <param name="actorSystemName"></param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.IgnoreMessages(System.Func{System.Object,System.Boolean})">
            <summary>
            Ignore all messages in the test actor for which the given function 
            returns <c>true</c>.
            </summary>
            <param name="shouldIgnoreMessage">Given a message, if the function returns 
            <c>true</c> the message will be ignored by <see cref="P:Akka.TestKit.TestKitBase.TestActor"/>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.IgnoreNoMessages">
            <summary>Stop ignoring messages in the test actor.</summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Watch(Akka.Actor.IActorRef)">
            <summary>
            Have the <see cref="P:Akka.TestKit.TestKitBase.TestActor"/> watch an actor and receive 
            <see cref="T:Akka.Actor.Terminated"/> messages when the actor terminates.
            </summary>
            <param name="actorToWatch">The actor to watch.</param>
            <returns>The actor to watch, i.e. the parameter <paramref name="actorToWatch"/></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Unwatch(Akka.Actor.IActorRef)">
            <summary>
            Have the <see cref="P:Akka.TestKit.TestKitBase.TestActor"/> stop watching an actor.
            </summary>
            <param name="actorToUnwatch">The actor to unwatch.</param>
            <returns>The actor to unwatch, i.e. the parameter <paramref name="actorToUnwatch"/></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.SetAutoPilot(Akka.TestKit.AutoPilot)">
            <summary>
            Install an <see cref="T:Akka.TestKit.AutoPilot"/> to drive the <see cref="P:Akka.TestKit.TestKitBase.TestActor"/>.
            The <see cref="T:Akka.TestKit.AutoPilot"/> will be run for each received message and can
            be used to send or forward messages, etc.
            Each invocation must return the AutoPilot for the next round. To reuse the
            same <see cref="T:Akka.TestKit.AutoPilot"/> return <see cref="P:Akka.TestKit.AutoPilot.KeepRunning"/>
            </summary>
            <param name="pilot">The pilot to install.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.RemainingOr(System.TimeSpan)">
            <summary>
             If inside a `within` block obtain time remaining for execution of the innermost enclosing `within`
             block; otherwise returns the given duration.
             </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.RemainingOrDilated(System.Nullable{System.TimeSpan})">
            <summary>
            If <paramref name="duration"/> is finite it is returned after it has been scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>.
            If <paramref name="duration"/> is undefined, it returns the remaining time (if within a `within` block) or the properly dilated 
            default from settings (key "akka.test.single-expect-default").
            If <paramref name="duration"/> is infinite, an <see cref="T:System.ArgumentException"/> is thrown.
            <remarks>The returned value is always finite.</remarks>
            </summary>
            <param name="duration">The maximum.</param>
            <returns>A finite <see cref="T:System.TimeSpan"/> properly dilated</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="duration"/> is infinite</exception>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">
            <summary>
            Multiplies the duration with the <see cref="P:Akka.TestKit.TestKitSettings.TestTimeFactor"/>,
            i.e. the config value "akka.test.timefactor"
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.GetTimeoutOrDefault(System.Nullable{System.TimeSpan})">
            <summary>
            If <paramref name="timeout"/> is defined it is returned; otherwise
            the config value "akka.test.single-expect-default" is returned.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Shutdown(System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Shuts down this system.
            On failure debug output will be logged about the remaining actors in the system.
            If verifySystemShutdown is true, then an exception will be thrown on failure.
            </summary>
            <param name="duration">Optional. The duration to wait for shutdown. Default is 5 seconds multiplied with the config value "akka.test.timefactor".</param>
            <param name="verifySystemShutdown">if set to <c>true</c> an exception will be thrown on failure.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Shutdown(Akka.Actor.ActorSystem,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Shuts down the specified system.
            On failure debug output will be logged about the remaining actors in the system.
            If verifySystemShutdown is true, then an exception will be thrown on failure.
            </summary>
            <param name="system">The system to shutdown.</param>
            <param name="duration">The duration to wait for shutdown. Default is 5 seconds multiplied with the config value "akka.test.timefactor"</param>
            <param name="verifySystemShutdown">if set to <c>true</c> an exception will be thrown on failure.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.CreateTestActor(System.String)">
            <summary>
            Creates a test actor with the specified name. The actor can be controlled by sending it 
            special control messages, see <see cref="T:Akka.TestKit.TestActor.SetIgnore"/>, 
            <see cref="T:Akka.TestKit.TestActor.Watch"/>, <see cref="T:Akka.TestKit.TestActor.Unwatch"/>,
            <see cref="T:Akka.TestKit.TestActor.SetAutoPilot"/>. All other messages are forwarded to the queue
            and can be retrieved with Receive and the ExpectMsg overloads.
            <para>The default test actor can be retrieved from the <see cref="P:Akka.TestKit.TestKitBase.TestActor"/> property</para>
            </summary>
            <param name="name">The name of the new actor.</param>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.CreateTestProbe(System.String)">
            <summary>
            Creates a new <see cref="T:Akka.TestKit.TestProbe"/>.
            </summary>
            <param name="name">Optional: The name of the probe.</param>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.CreateTestProbe(Akka.Actor.ActorSystem,System.String)">
            <summary>
            Creates a new <see cref="T:Akka.TestKit.TestProbe"/>.
            </summary>
            <param name="system">For multi-actor system tests, you can specify which system the node is for.</param>
            <param name="name">Optional: The name of the probe.</param>
            <returns></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.CreateTestLatch(System.Int32)">
            <summary>
            Creates a Countdown latch wrapper for use in testing.
            
            It uses a timeout when waiting and timeouts are specified as durations.
            There's a default timeout of 5 seconds and the default count is 1.
            Timeouts will always throw an exception.
            </summary>
            <param name="count">Optional. The count. Default: 1</param>
            <returns>A new <see cref="T:Akka.TestKit.TestLatch"/></returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.CreateTestBarrier(System.Int32)">
            <summary>
            Wraps a <see cref="T:System.Threading.Barrier"/> for use in testing.
            It always uses a timeout when waiting.
            Timeouts will always throw an exception. The default timeout is 5 seconds.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf(Akka.Actor.Props)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>.
            </summary>
            <param name="props">The props configuration object</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf(Akka.Actor.Props,System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>.
            </summary>
            <param name="props">The props configuration object</param>
            <param name="name">The name of the actor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf``1">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf``1(System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <param name="name">The name of the actor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/> using an expression that calls the constructor
            of <typeparamref name="TActor"/>.
            <example>
            <code>ActorOf&lt;MyActor&gt;(()=&gt;new MyActor("value", 4711))</code>
            </example>
            </summary>
            <typeparam name="TActor">The type of the actor.</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/> using an expression that calls the constructor
            of <typeparamref name="TActor"/>.
            <example>
            <code>ActorOf&lt;MyActor&gt;(()=&gt;new MyActor("value", 4711), "test-actor")</code>
            </example>
            </summary>
            <typeparam name="TActor">The type of the actor.</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
            <param name="name">The name of the actor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf(System.Action{Akka.Actor.Dsl.IActorDsl,Akka.Actor.IActorContext},System.String)">
            <summary>
            Creates a new actor by defining the behavior inside the <paramref name="configure"/> action.
            <example>
            <code>
            ActorOf(c =>
            {
                c.Receive&lt;string&gt;((msg, ctx) => ctx.Sender.Tell("Hello " + msg));
            });
            </code>
            </example>
            </summary>
            <param name="configure">An action that configures the actor's behavior.</param>
            <param name="name">Optional: The name of the actor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOf(System.Action{Akka.Actor.Dsl.IActorDsl},System.String)">
            <summary>
            Creates a new actor by defining the behavior inside the <paramref name="configure"/> action.
            <example>
            <code>
            ActorOf(c =>
            {
                c.Receive&lt;string&gt;((msg, ctx) => ctx.Sender.Tell("Hello " + msg));
            });
            </code>
            </example>
            </summary>
            <param name="configure">An action that configures the actor's behavior.</param>
            <param name="name">Optional: The name of the actor.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(Akka.Actor.Props,Akka.Actor.IActorRef,System.String)">
            <summary>
            Create a new actor as child of specified supervisor and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/>
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <param name="props">The <see cref="T:Akka.Actor.Props"/> object</param>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(Akka.Actor.Props,System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/> and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/> 
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <param name="props">The <see cref="T:Akka.Actor.Props"/> object</param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(System.Linq.Expressions.Expression{System.Func{``0}},Akka.Actor.IActorRef,System.String)">
            <summary>
            Create a new actor as child of the specified supervisor and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/> 
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            Uses an expression that calls the constructor of <typeparamref name="TActor"/>.
            <example>
            <code>ActorOf&lt;MyActor&gt;(()=&gt;new MyActor("value", 4711), "test-actor")</code>
            </example>
            </summary>
            <typeparam name="TActor">The type of the actor.</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/> and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/> 
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            Uses an expression that calls the constructor of <typeparamref name="TActor"/>.
            <example>
            <code>ActorOf&lt;MyActor&gt;(()=&gt;new MyActor("value", 4711), "test-actor")</code>
            </example>
            </summary>
            <typeparam name="TActor">The type of the actor.</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(Akka.Actor.IActorRef,System.String)">
            <summary>
            Create a new actor as child of the specified supervisor and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/> 
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestActorRef``1(System.String)">
            <summary>
            Create a new actor as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/> and returns it as <see cref="T:Akka.TestKit.TestActorRef`1"/> 
            to enable access to the underlying actor instance via <see cref="P:Akka.TestKit.TestActorRefBase`1.UnderlyingActor"/>.
            </summary>
            <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <param name="name">Optional: The name.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(Akka.Actor.Props,Akka.Actor.IActorRef,System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of the specified supervisor
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            </summary>
            <typeparam name="TFsmActor">The type of the actor. It must be a <see cref="T:Akka.Actor.FSM`2"/></typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="props">The <see cref="T:Akka.Actor.Props"/> object</param>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(Akka.Actor.Props,System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            </summary>
            <typeparam name="TFsmActor">The type of the actor. It must be a <see cref="T:Akka.Actor.FSM`2"/> and have a public parameterless constructor</typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="props">The <see cref="T:Akka.Actor.Props"/> object</param>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(Akka.Actor.IActorRef,System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of the specified supervisor
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            <typeparamref name="TFsmActor"/> must have a public parameterless constructor.
            </summary>
            <typeparam name="TFsmActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            <typeparamref name="TFsmActor"/> must have a public parameterless constructor.
            </summary>
            <typeparam name="TFsmActor">The type of the actor. It must have a parameterless public constructor</typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(System.Linq.Expressions.Expression{System.Func{``0}},Akka.Actor.IActorRef,System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of the specified supervisor
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            Uses an expression that calls the constructor of <typeparamref name="TFsmActor"/>.
            </summary>
            <typeparam name="TFsmActor">The type of the actor.</typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TFsmActor"/></param>
            <param name="supervisor">The supervisor</param>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ActorOfAsTestFSMRef``3(System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Akka.Actor.FSM`2"/> as child of <see cref="P:Akka.TestKit.TestKitBase.Sys"/>
            and returns it as <see cref="T:Akka.TestKit.TestFSMRef`3"/> to enable inspecting and modifying the FSM directly.
            Uses an expression that calls the constructor of <typeparamref name="TFsmActor"/>.
            </summary>
            <typeparam name="TFsmActor">The type of the actor.</typeparam>
            <typeparam name="TState">The type of state name</typeparam>
            <typeparam name="TData">The type of state data</typeparam>
            <param name="factory">An expression that calls the constructor of <typeparamref name="TFsmActor"/></param>
            <param name="name">Optional: The name.</param>
            <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitAssert(System.Action,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            <para>Await until the given assertion does not throw an exception or the timeout
            expires, whichever comes first. If the timeout expires the last exception
            is thrown.</para>
            <para>The action is called, and if it throws an exception the thread sleeps
            the specified interval before retrying.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block.</para>
            <para>Note that the timeout is scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>,
            which uses the configuration entry "akka.test.timefactor".</para>
            </summary>
            <param name="assertion">The action.</param>
            <param name="duration">The timeout.</param>
            <param name="interval">The interval to wait between executing the assertion.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(Akka.Actor.IActorRef,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message from the test actor and assert that it is of the specified type
            and was sent by the specified sender
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(Akka.Actor.IActorRef,``0,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that it
            equals the <paramref name="message"/> and was sent by the specified sender
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(Akka.Actor.IActorRef,System.Predicate{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that the given
            predicate accepts it and was sent by the specified sender
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            Use this variant to implement more complicated or conditional processing.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(System.Predicate{Akka.Actor.IActorRef},System.Predicate{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that the given
            predicate accepts it and was sent by a sender that matches the <paramref name="isSender"/> predicate.
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            Use this variant to implement more complicated or conditional processing.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(Akka.Actor.IActorRef,System.Action{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor, verifies that the sender is the specified
            and calls the action that performs extra assertions.
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            Use this variant to implement more complicated or conditional processing.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgFrom``1(System.Action{Akka.Actor.IActorRef},System.Action{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and calls the 
            action that performs extra assertions.
            Wait time is bounded by the given duration if specified.
            If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            Use this variant to implement more complicated or conditional processing.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message from the test actor and assert that it is of the specified type.
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(``0,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that it
            equals the <paramref name="message"/>.
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(System.Predicate{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that the given
            predicate accepts it.
            Use this variant to implement more complicated or conditional processing.
            
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(System.Action{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and calls the 
            action that performs extra assertions.
            Use this variant to implement more complicated or conditional processing.
            
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(System.Func{``0,Akka.Actor.IActorRef,System.Boolean},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and assert that the given
            predicate accepts it.
            Use this variant to implement more complicated or conditional processing.
            
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(System.Action{``0,Akka.Actor.IActorRef},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message of the specified type from the test actor calls the 
            action that performs extra assertions.
            Use this variant to implement more complicated or conditional processing.
            
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsg``1(``0,System.Func{``0,``0,System.Boolean},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message from the test actor and assert that it is equal to the expected value,
            according to the specified comparer function.
            
            Wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectTerminated(Akka.Actor.IActorRef,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receive one message from the test actor and assert that it is the Terminated message of the given ActorRef.
            
            Wait time is bounded by the given duration, if specified; otherwise
            wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>       
        </member>
        <member name="M:Akka.TestKit.TestKitBase.InternalExpectMsg``1(System.Nullable{System.TimeSpan},System.Action{``0},System.String)">
            <summary>
            Receive one message of the specified type from the test actor and calls the optional 
            action that performs extra assertions. Wait time is bounded by the given duration.
            Use this variant to implement more complicated or conditional processing.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectNoMsg">
            <summary>
            Assert that no message is received.
            
            Wait time is bounded by remaining time for execution of the innermost enclosing 'within'
            block, if inside a 'within' block; otherwise by the config value 
            "akka.test.single-expect-default".
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectNoMsg(System.TimeSpan)">
            <summary>
            Assert that no message is received for the specified time.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectNoMsg(System.Int32)">
            <summary>
            Assert that no message is received for the specified time in milliseconds.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgAnyOf``1(``0[])">
            <summary>
            Receive a message from the test actor and assert that it equals 
            one of the given <paramref name="messages"/>. Wait time is bounded by 
            <see cref="P:Akka.TestKit.TestKitBase.RemainingOrDefault"/> as duration, with an assertion exception being thrown in case of timeout.
            </summary>
            <typeparam name="T">The type of the messages</typeparam>
            <param name="messages">The messages.</param>
            <returns>The received messages in received order</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgAllOf``1(``0[])">
            <summary>
            Receive a number of messages from the test actor matching the given
            number of objects and assert that for each given object one is received
            which equals it and vice versa. This construct is useful when the order in
            which the objects are received is not fixed. Wait time is bounded by 
            <see cref="P:Akka.TestKit.TestKitBase.RemainingOrDefault"/> as duration, with an assertion exception being thrown in case of timeout.
            
            <code>
              dispatcher.Tell(SomeWork1())
              dispatcher.Tell(SomeWork2())
              ExpectMsgAllOf(TimeSpan.FromSeconds(1), Result1(), Result2())
            </code>
            </summary>
            <typeparam name="T">The type of the messages</typeparam>
            <param name="messages">The messages.</param>
            <returns>The received messages in received order</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ExpectMsgAllOf``1(System.TimeSpan,``0[])">
            <summary>
            Receive a number of messages from the test actor matching the given
            number of objects and assert that for each given object one is received
            which equals it and vice versa. This construct is useful when the order in
            which the objects are received is not fixed. Wait time is bounded by the
            given duration, with an assertion exception being thrown in case of timeout.
            
            <code>
              dispatcher.Tell(SomeWork1())
              dispatcher.Tell(SomeWork2())
              ExpectMsgAllOf(TimeSpan.FromSeconds(1), Result1(), Result2())
            </code>
            The deadline is scaled by "akka.test.timefactor" using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>.
            </summary>
            <typeparam name="T">The type of the messages</typeparam>
            <param name="max">The deadline. The deadline is scaled by "akka.test.timefactor" using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>.</param>
            <param name="messages">The messages.</param>
            <returns>The received messages in received order</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Within(System.TimeSpan,System.Action)">
            <summary>
            Execute code block while bounding its execution time between 0 seconds and <see cref="!:max"/>.
            <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
            are available in a version which implicitly uses the remaining time governed by 
            the innermost enclosing `within` block.</para>
            <remarks>Note that the max duration is scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Within(System.TimeSpan,System.TimeSpan,System.Action,System.String)">
            <summary>
            Execute code block while bounding its execution time between <see cref="!:min"/> and <see cref="!:max"/>.
            <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
            are available in a version which implicitly uses the remaining time governed by 
            the innermost enclosing `within` block.</para>
            <remarks>Note that the max duration is scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Within``1(System.TimeSpan,System.Func{``0})">
            <summary>
            Execute code block while bounding its execution time between 0 seconds and <see cref="!:max"/>.
            <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
            are available in a version which implicitly uses the remaining time governed by 
            the innermost enclosing `within` block.</para>
            <remarks>Note that the max duration is scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.Within``1(System.TimeSpan,System.TimeSpan,System.Func{``0},System.String)">
            <summary>
            Execute code block while bounding its execution time between <see cref="!:min"/> and <see cref="!:max"/>.
            <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
            are available in a version which implicitly uses the remaining time governed by 
            the innermost enclosing `within` block.</para>
            <remarks>Note that the max duration is scaled using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.FishForMessage(System.Predicate{System.Object},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receives messages until <paramref name="isMessage"/> returns <c>true</c>.
            Use it to ignore certain messages while waiting for a specific message.
            </summary>
            <param name="isMessage">The is message.</param>
            <param name="max">The maximum.</param>
            <param name="hint">The hint.</param>
            <returns>Returns the message that <paramref name="isMessage"/> matched</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.FishForMessage``1(System.Predicate{``0},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Receives messages until <paramref name="isMessage"/> returns <c>true</c>.
            Use it to ignore certain messages while waiting for a specific message.
            </summary>
            <typeparam name="T">The type of the expected message. Messages of other types are ignored.</typeparam>
            <param name="isMessage">The is message.</param>
            <param name="max">The maximum.</param>
            <param name="hint">The hint.</param>
            <returns>Returns the message that <paramref name="isMessage"/> matched</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveOne(System.Nullable{System.TimeSpan})">
            <summary>
            Receive one message from the internal queue of the TestActor.
            This method blocks the specified duration or until a message
            is received. If no message was received, <c>null</c> is returned.
            <remarks>This method does NOT automatically scale its Duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks>
            </summary>
            <param name="max">The maximum duration to wait. 
            If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
            If set to a negative value or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>, blocks forever.
            <remarks>This method does NOT automatically scale its Duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks></param>
            <returns>The message if one was received; <c>null</c> otherwise</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveOne(System.Threading.CancellationToken)">
            <summary>
            Receive one message from the internal queue of the TestActor.
            This method blocks until cancelled. 
            </summary>
            <param name="cancellationToken">A token used to cancel the operation</param>
            <returns>The message if one was received; <c>null</c> otherwise</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.TryReceiveOne(Akka.TestKit.MessageEnvelope@,System.Nullable{System.TimeSpan})">
            <summary>
            Receive one message from the internal queue of the TestActor within 
            the specified duration. The method blocks the specified duration.
            <remarks><b>Note!</b> that the returned <paramref name="envelope"/> 
            is a <see cref="T:Akka.TestKit.MessageEnvelope"/> containing the sender and the message.</remarks>
            <remarks>This method does NOT automatically scale its Duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks>
            </summary>
            <param name="envelope">The received envelope.</param>
            <param name="max">Optional: The maximum duration to wait. 
                If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
                If set to a negative value or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>, blocks forever.
                <remarks>This method does NOT automatically scale its Duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks></param>
            <returns><c>True</c> if a message was received within the specified duration; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.TryReceiveOne(Akka.TestKit.MessageEnvelope@,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Receive one message from the internal queue of the TestActor within 
            the specified duration.
            <para><c>True</c> is returned if a message existed, and the message 
            is returned in <paramref name="envelope"/>. The method blocks the 
            specified duration, and can be cancelled using the 
            <paramref name="cancellationToken"/>.
            </para> 
            <remarks>This method does NOT automatically scale its duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks>
            </summary>
            <param name="envelope">The received envelope.</param>
            <param name="max">The maximum duration to wait. 
                If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
                If set to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>, blocks forever (or until cancelled).
                <remarks>This method does NOT automatically scale its Duration parameter using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>!</remarks>
            </param>
            <param name="cancellationToken">A token used to cancel the operation.</param>
            <returns><c>True</c> if a message was received within the specified duration; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveWhile``1(System.Nullable{System.TimeSpan},System.Func{System.Object,``0},System.Int32)">
            <summary>
            Receive a series of messages until the function returns null or the overall
            maximum duration is elapsed or expected messages count is reached.
            Returns the sequence of messages.
            
            Note that it is not an error to hit the `max` duration in this case.
            The max duration is scaled by <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveWhile``1(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Func{System.Object,``0},System.Int32)">
            <summary>
            Receive a series of messages until the function returns null or the idle 
            timeout is met or the overall maximum duration is elapsed or 
            expected messages count is reached.
            Returns the sequence of messages.
            
            Note that it is not an error to hit the `max` duration in this case.
            The max duration is scaled by <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveWhile``1(System.Func{System.Object,``0},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Receive a series of messages until the function returns null or the idle 
            timeout is met (disabled by default) or the overall
            maximum duration is elapsed or expected messages count is reached.
            Returns the sequence of messages.
            
            Note that it is not an error to hit the `max` duration in this case.
            The max duration is scaled by <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveWhile``1(System.Predicate{``0},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Int32,System.Boolean)">
            <summary>
            Receive a series of messages.
            It will continue to receive messages until the <see cref="!:shouldIgnore"/> predicate returns <c>false</c> or the idle 
            timeout is met (disabled by default) or the overall
            maximum duration is elapsed or expected messages count is reached.
            If a message that isn't of type <typeparamref name="T"/> the parameter <paramref name="shouldIgnoreOtherMessageTypes"/> 
            declares if the message should be ignored or not.
            <para>Returns the sequence of messages.</para>
            
            Note that it is not an error to hit the `max` duration in this case.
            The max duration is scaled by <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveN(System.Int32)">
            <summary>
            Receive the specified number of messages using <see cref="P:Akka.TestKit.TestKitBase.RemainingOrDefault"/> as timeout.
            </summary>
            <param name="numberOfMessages">The number of messages.</param>
            <returns>The received messages</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.ReceiveN(System.Int32,System.TimeSpan)">
            <summary>
            Receive the specified number of messages in a row before the given deadline.
            The deadline is scaled by "akka.test.timefactor" using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>.
            </summary>
            <param name="numberOfMessages">The number of messages.</param>
            <param name="max">The timeout scaled by "akka.test.timefactor" using <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)"/>.</param>
            <returns>The received messages</returns>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean})">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or until a timeout</para>
            <para>The timeout is taken from the innermost enclosing `within`
            block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor"..</para>
            <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
            for about a tenth of the timeout value, before it checks the condition again. This is repeated until
            timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
            <see cref="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String)"/>
            </para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan})">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor"..</para>
            <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
            for about a tenth of the timeout value, before it checks the condition again. This is repeated until
            timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
            <see cref="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String)"/>
            </para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration. If undefined, uses the remaining time 
            (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor"..</para>
            <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
            for about a tenth of the timeout value, before it checks the condition again. This is repeated until
            timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
            <see cref="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String)"/>
            </para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration. If undefined, uses the remaining time 
            (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</param>
            <param name="message">The message used if the timeout expires.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitCondition(System.Func{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block.</para>
            <para>Note that the timeout is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</para>
            <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
            Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
            one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
            succeeds or fails.</para>
            <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
            instead set it to a relatively small value.</para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration. If undefined, uses the remaining time 
            (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
            The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</param>
            <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
            if the condition is fulfilled. Between calls the thread sleeps. If undefined, negative or 
            <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>the thread only sleeps one time, using the <paramref name="max"/>, 
            and then rechecks the condition and ultimately succeeds or fails.
            <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
            instead set it to a relatively small value.</para>
            </param>
            <param name="message">The message used if the timeout expires.</param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.AwaitConditionNoThrow(System.Func{System.Boolean},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first. Returns <c>true</c> if the condition was fulfilled.</para>        
            <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
            Between calls the thread sleeps. If <paramref name="interval"/> is not specified or <c>null</c> 100 ms is used.</para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration.</param>
            <param name="interval">Optional. The time between calls to <paramref name="conditionIsFulfilled"/> to check
            if the condition is fulfilled. Between calls the thread sleeps. If undefined, 100 ms is used
            </param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.InternalAwaitCondition(System.Func{System.Boolean},System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{System.String,System.Object[]})">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block.</para>
            <para>Note that the timeout is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</para>
            <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
            Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
            one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
            succeeds or fails.</para>
            <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
            instead set it to a relatively small value.</para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration. The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. 
            scaled by the factor specified in config value "akka.test.timefactor".</param>
            <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
            if the condition is fulfilled. Between calls the thread sleeps. If undefined the thread only sleeps 
            one time, using the <paramref name="max"/>, and then rechecks the condition and ultimately 
            succeeds or fails.
            <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
            instead set it to a relatively small value.</para>
            </param>
            <param name="fail">Action that is called when the timeout expired. 
            The parameters conforms to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
        </member>
        <member name="M:Akka.TestKit.TestKitBase.InternalAwaitCondition(System.Func{System.Boolean},System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{System.String,System.Object[]},Akka.Event.ILoggingAdapter)">
            <summary>
            <para>Await until the given condition evaluates to <c>true</c> or the timeout
            expires, whichever comes first.</para>
            <para>If no timeout is given, take it from the innermost enclosing `within`
            block.</para>
            <para>Note that the timeout is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. scaled by the factor 
            specified in config value "akka.test.timefactor".</para>
            <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
            Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
            one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
            succeeds or fails.</para>
            <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
            instead set it to a relatively small value.</para>
            </summary>
            <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
            <param name="max">The maximum duration. The value is <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">dilated</see>, i.e. 
            scaled by the factor specified in config value "akka.test.timefactor".</param>
            <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
            if the condition is fulfilled. Between calls the thread sleeps. If undefined the thread only sleeps 
            one time, using the <paramref name="max"/>, and then rechecks the condition and ultimately 
            succeeds or fails.
            <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
            instead set it to a relatively small value.</para>
            </param>
            <param name="fail">Action that is called when the timeout expired. 
            The parameters conforms to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="logger">If a <see cref="T:Akka.Event.ILoggingAdapter"/> is specified, debug messages will be logged using it. If <c>null</c> nothing will be logged</param>
        </member>
        <member name="P:Akka.TestKit.TestKitBase.TestActor">
            <summary>
            The default TestActor. The actor can be controlled by sending it 
            special control messages, see <see cref="T:Akka.TestKit.TestActor.SetIgnore"/>, 
            <see cref="T:Akka.TestKit.TestActor.Watch"/>, <see cref="T:Akka.TestKit.TestActor.Unwatch"/>.
            You can also install an <see cref="T:Akka.TestKit.AutoPilot"/> to drive the actor, see
            <see cref="M:Akka.TestKit.TestKitBase.SetAutoPilot(Akka.TestKit.AutoPilot)"/>. All other messages are forwarded to the queue
            and can be retrieved with Receive and the ExpectMsg overloads.
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitBase.EventFilter">
            <summary>
            Filter <see cref="T:Akka.Event.LogEvent"/> sent to the system's <see cref="T:Akka.Event.EventStream"/>.
            In order to be able to filter the log the special logger
            <see cref="T:Akka.TestKit.TestEventListener"/> must be installed using the config
            <code>akka.loggers = ["Akka.TestKit.TestEventListener, Akka.TestKit"]</code>
            It is installed by default in testkit.
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitBase.HasMessages">
            <summary>
            Returns <c>true</c> if messages are available.
            </summary>
            <value>
            <c>true</c> if messages are available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Akka.TestKit.TestKitBase.RemainingOrDefault">
            <summary>Obtain time remaining for execution of the innermost enclosing `within`
            block or missing that it returns the properly dilated default for this
            case from settings (key "akka.test.single-expect-default"). <remarks>The returned value is always finite.</remarks>
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitBase.Remaining">
            <summary>
            Obtain time remaining for execution of the innermost enclosing <see cref="M:Akka.TestKit.TestKitBase.Within(System.TimeSpan,System.Action)">Within</see>
            block or throw an <see cref="T:System.InvalidOperationException"/> if no `within` block surrounds this
            call. <remarks>The returned value is always finite.</remarks>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this was called outside of within</exception>
        </member>
        <member name="T:Akka.TestKit.TestKitExtension">
            <summary>
            A extension to be used together with the TestKit.
            <example>
            To get the settings:
            <code>var testKitSettings = TestKitExtension.For(system);</code>
            </example>
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestKitSettings">
            <summary>
            Contains settings to be used when writing tests with TestKit.
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitSettings.DefaultTimeout">
            <summary>
            Gets the default timeout as specified in the setting akka.test.default-timeout.
            Typically used for Ask-timeouts. It is always finite.
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitSettings.SingleExpectDefault">
            <summary>Gets the config value "akka.test.single-expect-default". It is always finite.</summary>
        </member>
        <member name="P:Akka.TestKit.TestKitSettings.TestEventFilterLeeway">
            <summary>Gets the config value "akka.test.filter-leeway".  It is always finite.</summary>
        </member>
        <member name="P:Akka.TestKit.TestKitSettings.TestTimeFactor">
            <summary>
            Gets the timefactor by which all values are scaled by.
            <para>
            The tight timeouts you use during testing on your lightning-fast notebook 
            will invariably lead to spurious test failures on the heavily loaded 
            CI server. To account for this situation, all maximum durations are 
            internally scaled by this factor, which defaults to 1. To change this value
            set configuration "akka.test.timefactor" to a positive double/integer.</para>
            <para>
            You can scale other durations with the same factor by using the
            <see cref="M:Akka.TestKit.TestKitBase.Dilated(System.TimeSpan)">Testkit.Dilated</see>
            </para>
            </summary>
        </member>
        <member name="P:Akka.TestKit.TestKitSettings.LogTestKitCalls">
            <summary>
            If set to <c>true</c> calls to testkit will be logged.
            This is enabled by seting configuration "akka.test.testkit.debug" value to a true.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestLatch">
            <summary>
            <para>A count down latch that initially is closed. In order for it to become open <see cref="M:Akka.TestKit.TestLatch.CountDown"/> must be called.
            By default one call is enough, but this can be changed by specifying the count in the constructor.</para>
            
            <para>By default a timeout of 5 seconds is used.</para>
            <para>
            When created using <see cref="M:Akka.TestKit.TestKitBase.CreateTestLatch(System.Int32)">TestKit.CreateTestLatch</see> the default
            timeout from <see cref="P:Akka.TestKit.TestKitSettings.DefaultTimeout"/> is used and all timeouts are dilated, i.e. multiplied by 
            <see cref="P:Akka.TestKit.TestKitSettings.TestTimeFactor"/>
            </para>
            Timeouts will always throw an exception.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.TestLatch"/> class with count = 1, i.e. the 
            instance will become open after one call to <see cref="M:Akka.TestKit.TestLatch.CountDown"/>.
            The default timeout is set to 5 seconds.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.TestLatch"/> class with the specified count, i.e
            number of times <see cref="M:Akka.TestKit.TestLatch.CountDown"/> must be called to make this instance become open.
            The default timeout is set to 5 seconds.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.TestKit.TestLatch"/> class with the specified count, i.e
            number of times <see cref="M:Akka.TestKit.TestLatch.CountDown"/> must be called to make this instance become open.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.#ctor(System.Func{System.TimeSpan,System.TimeSpan},System.Int32,System.TimeSpan)">
            <summary>
            Creates a TestLatch with the specified dilate function, timeout and count. 
            Intended to be used by TestKit.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.CountDown">
            <summary>
            Count down the latch.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.Open">
            <summary>
            Make this instance become open.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.Reset">
            <summary>
            Reset this instance to the initial count, making it become closed.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestLatch.Ready(System.TimeSpan)">
            <summary>
            Expects the latch to become open within the specified timeout. If the timeout is reached, a
            <see cref="T:System.TimeoutException"/> is thrown.
            <para>
            If this instance has been created using <see cref="M:Akka.TestKit.TestKitBase.CreateTestLatch(System.Int32)">TestKit.CreateTestLatch</see> 
            <paramref name="timeout"/> is dilated, i.e. multiplied by <see cref="P:Akka.TestKit.TestKitSettings.TestTimeFactor"/>
            </para>
            </summary>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached</exception>
            <exception cref="T:System.ArgumentException">Thrown when a too large timeout has been specified</exception>
        </member>
        <member name="M:Akka.TestKit.TestLatch.Ready">
            <summary>
            Expects the latch to become open within the default timeout. If the timeout is reached, a
            <see cref="T:System.TimeoutException"/> is thrown.
            <para>If no timeout was specified when creating this instance, 5 seconds is used.</para>
            <para>If this instance has been created using <see cref="M:Akka.TestKit.TestKitBase.CreateTestLatch(System.Int32)">TestKit.CreateTestLatch</see> the default
            timeout from <see cref="P:Akka.TestKit.TestKitSettings.DefaultTimeout"/> is used and dilated, i.e. multiplied by 
            <see cref="P:Akka.TestKit.TestKitSettings.TestTimeFactor"/>
            </para>
            </summary>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached</exception>
        </member>
        <member name="P:Akka.TestKit.TestLatch.IsOpen">
            <summary>
            Gets a value indicating whether the latch is open.
            </summary>
        </member>
        <member name="T:Akka.TestKit.TestProbe">
            <summary>
            TestKit-based probe which allows sending, reception and reply.
            Use <see cref="M:Akka.TestKit.TestKitBase.CreateTestProbe(System.String)"/> inside your test 
            to create new instances.
            </summary>
        </member>
        <member name="M:Akka.TestKit.TestProbe.Send(Akka.Actor.IActorRef,System.Object)">
            <summary>
            Send message to an actor while using the probe as the sender.
            Replies will be available for inspection with all of TestKit's assertion
            methods.
            </summary>
            <param name="actor">The actor.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.TestKit.TestProbe.Forward(Akka.Actor.IActorRef,System.Object)">
            <summary>
            Forwards a message to the specified actor. As sender the sender of the last message is used.
            </summary>
            <param name="actor">The actor to forward to.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.TestKit.TestProbe.Forward(Akka.Actor.IActorRef)">
            <summary>
            Forwards the last received message to the specified actor as if the 
            <see cref="P:Akka.TestKit.TestKitBase.LastMessage"/> was sent directly to the actor in the first place.
            </summary>
            <param name="actor">The actor to forward to.</param>
        </member>
        <member name="M:Akka.TestKit.TestProbe.Reply(System.Object)">
            <summary>
            Send message to the sender of the last received message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Akka.TestKit.TestProbe.Ref">
            <summary>Gets the reference of this probe.</summary>
        </member>
        <member name="P:Akka.TestKit.TestProbe.Sender">
            <summary>Gets the sender of the last message</summary>
        </member>
    </members>
</doc>
