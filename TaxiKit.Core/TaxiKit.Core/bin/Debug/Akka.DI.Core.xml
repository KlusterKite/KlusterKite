<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.DI.Core</name>
    </assembly>
    <members>
        <member name="T:Akka.DI.Core.DIActorProducer">
            <summary>
            Dependency Injection Backed IndirectActorProducer
            </summary>
        </member>
        <member name="M:Akka.DI.Core.DIActorProducer.Produce">
            <summary>
            Creates an instance of the Actor based on the Type specified in the constructor parameter actorName
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Akka.DI.Core.DIActorProducer.Release(Akka.Actor.ActorBase)" -->
        <member name="P:Akka.DI.Core.DIActorProducer.ActorType">
            <summary>
            The System.Type of the Actor specified in the constructor parameter actorName
            </summary>
        </member>
        <member name="T:Akka.DI.Core.DIExt">
            <summary>
            Dependency Injection Extension used by the Actor System to Create the Prop configuration of DIActorProducer
            </summary>
        </member>
        <member name="M:Akka.DI.Core.DIExt.Initialize(Akka.DI.Core.IDependencyResolver)">
            <summary>
            Used to initialize the DIExtensionProvider
            </summary>
            <param name="dependencyResolver"></param>
        </member>
        <member name="T:Akka.DI.Core.DIExtension">
            <summary>
            ExtensionIdProvider for the DIExt. Used to Create an instance of DIExt which implements IExtension
            </summary>
        </member>
        <member name="T:Akka.DI.Core.Extensions">
            <summary>
            Extension methods used to simplify working with the Akka.DI.Core
            </summary>
        </member>
        <member name="M:Akka.DI.Core.Extensions.AddDependencyResolver(Akka.Actor.ActorSystem,Akka.DI.Core.IDependencyResolver)">
            <summary>
            Method used to register the IDependencyResolver to the ActorSystem
            </summary>
            <param name="system">Instance of the ActorSystem</param>
            <param name="dependencyResolver">Concrete Instance of IDependencyResolver i.e. Akka.DI.AutoFac.AutoFacDependencyResolver</param>
        </member>
        <member name="T:Akka.DI.Core.IDependencyResolver">
            <summary>
            Defines services used by the <see cref="T:Akka.Actor.ActorSystem"/> extension system to create actors
            </summary>
        </member>
        <member name="M:Akka.DI.Core.IDependencyResolver.GetType(System.String)">
            <summary>
            Retrieves an actor's type with the specified name
            </summary>
            <param name="actorName">The name of the actor to retrieve</param>
            <returns>The type with the specified actor name</returns>
        </member>
        <member name="M:Akka.DI.Core.IDependencyResolver.CreateActorFactory(System.Type)">
            <summary>
            Creates a delegate factory used to create actors based on their type
            </summary>
            <param name="actorType">The type of actor that the factory builds</param>
            <returns>A delegate factory used to create actors</returns>
        </member>
        <member name="M:Akka.DI.Core.IDependencyResolver.Create``1">
            <summary>
            Used to register the configuration for an actor of the specified type <typeparam name="TActor"/>
            </summary>
            <typeparam name="TActor">The type of actor the configuration is based</typeparam>
            <returns>The configuration object for the given actor type</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Akka.DI.Core.IDependencyResolver.Release(Akka.Actor.ActorBase)" -->
    </members>
</doc>
