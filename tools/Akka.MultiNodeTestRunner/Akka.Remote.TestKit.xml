<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.Remote.TestKit</name>
    </assembly>
    <members>
        <member name="T:Akka.Remote.TestKit.BarrierCoordinator">
             <summary>
             
             This barrier coordinator gets informed of players connecting (NodeInfo),
             players being deliberately removed (RemoveClient) or failing (ClientDisconnected)
             by the controller. It also receives EnterBarrier requests, where upon the first
             one received the name of the current barrier is set and all other known clients
             are expected to join the barrier, whereupon all of the will be sent the successful
             EnterBarrier return message. In case of planned removals, this may just happen
             earlier, in case of failures the current barrier (and all subsequent ones) will
             be failed by sending BarrierFailed responses.
            
            INTERNAL API.
             </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.CommandLine">
            <summary>
            Command line argument parser for individual node tests during a <see cref="T:Akka.Remote.TestKit.MultiNodeSpec"/>.
            
            Parses arguments from <see cref="M:System.Environment.GetCommandLineArgs"/> using the same conventions as canonical Akka.
            
            For example (from the Akka.NodeTestRunner source):
            <code>
                var nodeIndex = CommandLine.GetInt32("multinode.index");
                var assemblyName = CommandLine.GetProperty("multinode.test-assembly");
                var typeName = CommandLine.GetProperty("multinode.test-class");
                var testName = CommandLine.GetProperty("multinode.test-method");
            </code>
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.TestConductor">
            <summary>
            The conductor is the one orchestrating the test: it governs the
            <see cref="T:Akka.Remote.TestKit.Controller"/>'s ports to which all
            Players connect, it issues commands to their
            <see cref="!:Akka.Remote.TestKit.NetworkFailureInjector"/> and provides support
            for barriers using the <see cref="T:Akka.Remote.TestKit.BarrierCoordinator"/>.
            All of this is bundled inside the <see cref="T:Akka.Remote.TestKit.TestConductor"/>
            </summary>
            <summary>
            This binds together the Conductor and Player in an extension
            ====Note====
            This extension requires the `akka.actor.provider`
            to be a <see cref="T:Akka.Remote.RemoteActorRefProvider"/>.
            To use ``blackhole``, ``passThrough``, and ``throttle`` you must activate the
            failure injector and throttler transport adapters by specifying `testTransport(on = true)`
            in your MultiNodeConfig.
            </summary>
            <summary>
            The Player is the client component of the
            test conductor extension. It registers with
            the conductor's controller
             in order to participate in barriers and enable network failure injection
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.StartController(System.Int32,Akka.Remote.TestKit.RoleName,Helios.Topology.INode)">
             <summary>
             Start the <see cref="P:Akka.Remote.TestKit.TestConductor.Controller"/>, which in turn will
             bind to a TCP port as specified in the `akka.testconductor.port` config
             property, where 0 denotes automatic allocation. Since the latter is
             actually preferred, a `Future[Int]` is returned which will be completed
             with the port number actually chosen, so that this can then be communicated
             to the players for their proper start-up.
            
             This method also invokes Player.startClient,
             since it is expected that the conductor participates in barriers for
             overall coordination. The returned Future will only be completed once the
             client’s start-up finishes, which in fact waits for all other players to
             connect.
             </summary>
             <param name="participants">participants gives the number of participants which shall connect
              before any of their startClient() operations complete
             </param>
             <param name="name"></param>
             <param name="controllerPort"></param>
             <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Throttle(Akka.Remote.TestKit.RoleName,Akka.Remote.TestKit.RoleName,Akka.Remote.Transport.ThrottleTransportAdapter.Direction,System.Single)">
            <summary>
            Make the remoting pipeline on the node throttle data sent to or received
            from the given remote peer. Throttling works by delaying packet submission
            within the netty pipeline until the packet would have been completely sent
            according to the given rate, the previous packet completion and the current
            packet length. In case of large packets they are split up if the calculated
            end pause would exceed `akka.testconductor.packet-split-threshold`
            (roughly). All of this uses the system’s scheduler, which is not
            terribly precise and will execute tasks later than they are schedule (even
            on average), but that is countered by using the actual execution time for
            determining how much to send, leading to the correct output rate, but with
            increased latency.
            
            ====Note====
            To use this feature you must activate the failure injector and throttler
            transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="target">is the symbolic name of the other node to which connectivity shall be throttled</param>
            <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
            <param name="rateMBit">is the maximum data rate in MBit</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Blackhole(Akka.Remote.TestKit.RoleName,Akka.Remote.TestKit.RoleName,Akka.Remote.Transport.ThrottleTransportAdapter.Direction)">
            <summary>
            Switch the helios pipeline of the remote support into blackhole mode for
            sending and/or receiving: it will just drop all messages right before
            submitting them to the Socket or right after receiving them from the
            Socket.
            
             ====Note====
            To use this feature you must activate the failure injector and throttler
            transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
            <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.PassThrough(Akka.Remote.TestKit.RoleName,Akka.Remote.TestKit.RoleName,Akka.Remote.Transport.ThrottleTransportAdapter.Direction)">
            <summary>
            Switch the Helios pipeline of the remote support into pass through mode for
            sending and/or receiving.
            
            ====Note====
            To use this feature you must activate the failure injector and throttler
            transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
            <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Disconnect(Akka.Remote.TestKit.RoleName,Akka.Remote.TestKit.RoleName)">
            <summary>
            Tell the remote support to TCP_RESET the connection to the given remote
            peer. It works regardless of whether the recipient was initiator or
            responder.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Abort(Akka.Remote.TestKit.RoleName,Akka.Remote.TestKit.RoleName)">
            <summary>
            Tell the remote support to TCP_RESET the connection to the given remote
            peer. It works regardless of whether the recipient was initiator or
            responder.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Exit(Akka.Remote.TestKit.RoleName,System.Int32)">
            <summary>
            Tell the actor system at the remote node to shut itself down. The node will also be
            removed, so that the remaining nodes may still pass subsequent barriers.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="exitValue">is the return code which shall be given to System.exit</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Shutdown(Akka.Remote.TestKit.RoleName,System.Boolean)">
            <summary>
            Tell the actor system at the remote node to shut itself down without
            awaiting termination of remote-deployed children. The node will also be
            removed, so that the remaining nodes may still pass subsequent barriers.
            </summary>
            <param name="node">is the symbolic name of the node which is to be affected</param>
            <param name="abort"></param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.GetNodes">
            <summary>
            Obtain the list of remote host names currently registered.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.RemoveNode(Akka.Remote.TestKit.RoleName)">
            <summary>
            Remove a remote host from the list, so that the remaining nodes may still
            pass subsequent barriers. This must be done before the client connection
            breaks down in order to affect an “orderly” removal (i.e. without failing
            present and future barriers).
            </summary>
            <param name="node">is the symbolic name of the node which is to be removed</param>
            <returns></returns>
        </member>
        <member name="P:Akka.Remote.TestKit.TestConductor.Transport">
            <summary>
            Remote transport used by the actor ref provider.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.TestConductor.Address">
            <summary>
            Transport address of this Helios-like remote transport.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.StartClient(Akka.Remote.TestKit.RoleName,Helios.Topology.INode)">
            <summary>
            Connect to the conductor on the given port (the host is taken from setting
            `akka.testconductor.host`). The connection is made asynchronously, but you
            should await completion of the returned Future because that implies that
            all expected participants of this test have successfully connected (i.e.
            this is a first barrier in itself). The number of expected participants is
            set in <see cref="T:Akka.Remote.TestKit.TestConductor"/>`.startController()`.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Enter(System.String)">
            <summary>
            Enter the named barriers, one after the other, in the order given. Will
            throw an exception in case of timeouts or other errors.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.TestConductor.Enter(System.TimeSpan,System.Collections.Immutable.ImmutableList{System.String})">
            <summary>
            Enter the named barriers, one after the other, in the order given. Will
            throw an exception in case of timeouts or other errors.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.ConductorHandler">
            <summary>
            This handler is what's used to process events which occur on <see cref="T:Akka.Remote.TestKit.RemoteConnection"/>.
            
            It's only purpose is to dispatch incoming messages to the right <see cref="T:Akka.Remote.TestKit.ServerFSM"/> actor. There is
            one shared instance fo this class for all <see cref="T:Helios.Net.IConnection"/>s accepted by one <see cref="T:Akka.Remote.TestKit.Controller"/>.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.ServerFSM">
            <summary>
            The server part of each client connection is represented by a ServerFSM.
            The Initial state handles reception of the new client’s
            <see cref="T:Akka.Remote.TestKit.Hello"/> message (which is needed for all subsequent
            node name translations).
            
            In the Ready state, messages from the client are forwarded to the controller
            and <see cref="T:Akka.Remote.EndpointManager.Send"/> requests are sent, but the latter is
            treated specially: all client operations are to be confirmed by a
            <see cref="T:Akka.Remote.TestKit.Done"/> message, and there can be only one such
            request outstanding at a given time (i.e. a Send fails if the previous has
            not yet been acknowledged).
            
            INTERNAL API.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Controller">
            <summary>
            This controls test execution by managing barriers (delegated to
            <see cref="T:Akka.Remote.TestKit.BarrierCoordinator"/>, its child) and allowing
            network and other failures to be injected at the test nodes.
            
            INTERNAL API.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Controller.ClientDisconnectedException">
            <summary>
            This exception is thrown when a client has disconnected.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.Controller.ClientDisconnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.TestKit.Controller.ClientDisconnectedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Remote.TestKit.Controller.ClientDisconnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.TestKit.Controller.ClientDisconnectedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.TestKit.Controller.IHaveNodeInfo">
            <summary>
            Marker interface for working with <see cref="T:Akka.Remote.TestKit.BarrierCoordinator"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.Controller.SupervisorStrategy">
            <summary>
            Supervision of the BarrierCoordinator means to catch all his bad emotions
            and sometimes console him (BarrierEmpty, BarrierTimeout), sometimes tell
            him to hate the world (WrongBarrier, DuplicateNode, ClientLost). The latter shall help
            terminate broken tests as quickly as possible (i.e. without awaiting
            BarrierTimeouts in the players).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Akka.Remote.TestKit.Hello">
            <summary>
            First message of connection sets names straight.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.TestConductorExtension">
            <summary>
            Access to the <see cref="T:Akka.Remote.TestKit.TestConductor"/> extension:
            
            {{{
            var tc = TestConductor(system)
            tc.StartController(numPlayers)
            OR
            tc.StartClient(conductorPort)
            }}}
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Internals.TestConductorConfigFactory">
             <summary>
             This class contains methods used to retrieve Multi-Node TestKit configuration options from this assembly's resources
             and injects them in relevant tests.
            
             <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
             </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.Internals.TestConductorConfigFactory.Default">
            <summary>
            Retrieves the default Multi-Node TestKit options that Akka.NET uses when no configuration has been defined.
            </summary>
            <returns>The configuration that contains default values for all Multi-Node TestKit options.</returns>
        </member>
        <member name="M:Akka.Remote.TestKit.Internals.TestConductorConfigFactory.FromResource(System.String)">
            <summary>
            Retrieves a configuration defined in a resource of the current executing assembly.
            </summary>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <returns>The configuration defined in the current executing assembly.</returns>
        </member>
        <member name="T:Akka.Remote.TestKit.ClientFSM">
            <summary>
            This is the controlling entity on the player
            side: in a first step it registers itself with a symbolic name and its remote
            address at the <see cref="T:Akka.Remote.TestKit.Controller"/>, then waits for the
            `Done` message which signals that all other expected test participants have
            done the same. After that, it will pass barrier requests to and from the
            coordinator and react to the Conductors’s
            requests for failure injection.
            
            Note that you can't perform requests concurrently, e.g. enter barrier
            from one thread and ask for node address from another thread.
            
            INTERNAL API.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.PlayerHandler">
            <summary>
            This handler only forwards messages received from the conductor to the <see cref="T:Akka.Remote.TestKit.ClientFSM"/>
            
            INTERNAL API.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Proto.ProtobufDecoder">
            <summary>
            Decodes a message from a <see cref="T:Helios.Buffers.IByteBuf"/> into a Google protobuff wire format
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Proto.ProtobufEncoder">
            <summary>
            Encodes a generic object into a <see cref="T:Helios.Buffers.IByteBuf"/> using Google protobufs
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.Role">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.IHeliosConnectionHandler">
            <summary>
            Handler interface for receiving events from Helios
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.RemoteConnection">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.MultiNodeConfig">
            <summary>
            Configure the role names and participants of the test, including configuration settings
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeConfig.CommonConfig">
            <summary>
            Register a common base config for all test participants, if so desired.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeConfig.NodeConfig(System.Collections.Generic.IEnumerable{Akka.Remote.TestKit.RoleName},System.Collections.Generic.IEnumerable{Akka.Configuration.Config})">
            <summary>
            Register a config override for a specific participant.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeConfig.DebugConfig(System.Boolean)">
            <summary>
            Include for verbose debug logging
            </summary>
            <param name="on">when `true` debug Config is returned, otherwise config with info logging</param>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeConfig.TestTransport">
            <summary>
            To be able to use `blackhole`, `passThrough`, and `throttle` you must
            activate the failure injector and throttler transport adapters by
            specifying `testTransport(on = true)` in your MultiNodeConfig.
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.MultiNodeSpec">
            <summary>
            Note: To be able to run tests with everything ignored or excluded by tags
            you must not use `testconductor`, or helper methods that use `testconductor`,
            from the constructor of your test class. Otherwise the controller node might
            be shutdown before other nodes have completed and you will see errors like:
            `AskTimeoutException: sending to terminated ref breaks promises`. Using lazy
            val is fine.
            </summary>
        </member>
        <member name="F:Akka.Remote.TestKit.MultiNodeSpec.MaxNodesUnset">
            <summary>
            Marker used to indicate that <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.MaxNodes"/> has not been set yet.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.MaxNodes">
            <summary>
            Number of nodes node taking part in this test.
            -Dmultinode.max-nodes=4
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.SelfName">
            <summary>
            Name (or IP address; must be resolvable)
            of the host this node is running on
            
            <code>-Dmultinode.host=host.example.com</code>
            
            InetAddress.getLocalHost.getHostAddress is used if empty or "localhost"
            is defined as system property "multinode.host".
            </summary>
        </member>
        <member name="F:Akka.Remote.TestKit.MultiNodeSpec.SelfPortUnsetValue">
            <summary>
            Marker used to indicate what the "not been set" value of <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.SelfPort"/> is.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.SelfPort">
            <summary>
            Port number of this node. Defaults to 0 which means a random port.
            
            <code>-Dmultinode.port=0</code>
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.ServerName">
            <summary>
            Name (or IP address; must be resolvable using InetAddress.getByName)
            of the host that the server node is running on.
            
            <code>-Dmultinode.server-host=server.example.com</code>
            </summary>
        </member>
        <member name="F:Akka.Remote.TestKit.MultiNodeSpec.ServerPortUnsetValue">
            <summary>
            Marker used to indicate what the "not been set" value of <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.ServerPort"/> is.
            </summary>
        </member>
        <member name="F:Akka.Remote.TestKit.MultiNodeSpec.ServerPortDefault">
            <summary>
            Default value for <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.ServerPort"/>
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.ServerPort">
            <summary>
            Port number of the node that's running the server system. Defaults to 4711.
            
            <code>-Dmultinode.server-port=4711</code>
            </summary>
        </member>
        <member name="F:Akka.Remote.TestKit.MultiNodeSpec.SelfIndexUnset">
            <summary>
            Marker value used to indicate that <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.SelfIndex"/> has not been set yet.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.SelfIndex">
            <summary>
            Index of this node in the roles sequence. The TestConductor
            is started in “controller” mode on selfIndex 0, i.e. there you can inject
            failures and shutdown other nodes etc.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.VerifySystemShutdown">
            <summary>
            Override this and return `true` to assert that the
            shutdown of the `ActorSystem` was done properly.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.AtStartup">
            <summary>
            Override this method to do something when the whole test is starting up.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.AfterTermination">
            <summary>
            Override this method to do something when the whole test is terminating.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.Roles">
            <summary>
            All registered roles
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.InitialParticipants">
            <summary>
            MUST BE DEFINED BY USER.
            
            Defines the number of participants required for starting the test. This
            might not be equals to the number of nodes available to the test.
            </summary>
        </member>
        <member name="P:Akka.Remote.TestKit.MultiNodeSpec.InitialParticipantsValueFactory">
            <summary>
            Must be defined by user. Creates the values used by <see cref="P:Akka.Remote.TestKit.MultiNodeSpec.InitialParticipants"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.RunOn(System.Action,Akka.Remote.TestKit.RoleName[])">
            <summary>
            Execute the given block of code only on the given nodes (names according
            to the `roleMap`).
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.IsNode(Akka.Remote.TestKit.RoleName[])">
            <summary>
            Verify that the running node matches one of the given nodes
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.EnterBarrier(System.String[])">
            <summary>
            Enter the named barriers in the order given. Use the remaining duration from
            the innermost enclosing `within` block or the default `BarrierTimeout`
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.MultiNodeSpec.Node(Akka.Remote.TestKit.RoleName)">
            <summary>
            Query the controller for the transport address of the given node (by role name) and
            return that as an ActorPath for easy composition:
            
            <code>var serviceA = Sys.ActorSelection(Node(new RoleName("master")) / "user" / "serviceA");</code>
            </summary>
        </member>
        <member name="T:Akka.Remote.TestKit.IMultiNodeSpecCallbacks">
            <summary>
            Use this to hook <see cref="T:Akka.Remote.TestKit.MultiNodeSpec"/> into your test framework lifecycle
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.IMultiNodeSpecCallbacks.MultiNodeSpecBeforeAll">
            <summary>
            Call this before the start of the test run. NOT before every test case.
            </summary>
        </member>
        <member name="M:Akka.Remote.TestKit.IMultiNodeSpecCallbacks.MultiNodeSpecAfterAll">
            <summary>
            Call this after the all test cases have run. NOT after every test case.
            </summary>
        </member>
    </members>
</doc>
